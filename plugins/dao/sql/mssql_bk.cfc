<!--- * * (coldfusion comments are completely stripped out once at compile time, and have zero impact on performance)
Created On: 01/01/2008
Developed By: Bassil Karam (bassil.karam@thinkloop.com)
* * --->
<cfcomponent output="false">

	<!--- init --->
	<cffunction name="init" access="public" output="false" returntype="any">
		<cfargument name="Datasource" />

		<cfscript>
			variables.Datasource=arguments.Datasource;
		</cfscript>

		<cfreturn this />
	</cffunction>

	<!--- create --->
	<cffunction name="create" access="public" output="false" returntype="boolean">
		<cfargument name="SQLInput" type="struct" hint="Struct of structs of some meta data and current values for easy data retrieval" />
		<cfargument name="TableName" hint="Name of table in string format." />
		<cfargument name="CreateProperties" type="string" hint="Comma-separated list of properties to update" />
		<cfargument name="IsAutoGeneratedPrimaryKey" type="boolean" default="false" />

		<cfset var currentProperty="" />
		<cfset var Query="" />

		<cfquery name="Query" Datasource="#getDatasource().DSN#" Username="#getDatasource().Username#" Password="#getDatasource().Password#">
		INSERT INTO [#arguments.TableName#]
			(
			[#arguments.SQLInput[ListFirst(arguments.CreateProperties)].DBName#]
			<cfif ListLen(ListRest(arguments.CreateProperties))>
				<cfloop list="#ListRest(arguments.CreateProperties)#" index="currentProperty">
					, [#arguments.SQLInput[currentProperty].DBName#]
				</cfloop>
			</cfif>
			)
		VALUES
			(
			<cfqueryparam value="#arguments.SQLInput[ListFirst(arguments.CreateProperties)].Value#" cfsqltype="#arguments.SQLInput[ListFirst(arguments.CreateProperties)].CFSQLType#" null="#arguments.SQLInput[ListFirst(arguments.CreateProperties)].IsNull#" />
			<cfif ListLen(ListRest(arguments.CreateProperties))>
				<cfloop list="#ListRest(arguments.CreateProperties)#" index="currentProperty">
					, <cfqueryparam value="#arguments.SQLInput[currentProperty].Value#" cfsqltype="#arguments.SQLInput[currentProperty].CFSQLType#" null="#arguments.SQLInput[currentProperty].IsNull#" />
				</cfloop>
			</cfif>
			)

		<cfif arguments.IsAutoGeneratedPrimaryKey>
			SELECT SCOPE_IDENTITY() AS [LoadedObjectsTempAutoGeneratedID]
		</cfif>
		</cfquery>

		<!--- get autogenerated primary key --->
		<cfif arguments.IsAutoGeneratedPrimaryKey>
			<cfreturn Query.LoadedObjectsTempAutoGeneratedID />
		<cfelse>
			<cfreturn True />
		</cfif>
	</cffunction>

	<!--- read ---->
	<cffunction name="read" access="public" output="false" returntype="query">
		<cfargument name="SQLInput" type="struct" hint="Struct of structs of some meta data and current values for easy data retrieval" />
		<cfargument name="TableName" type="string" hint="Name of table in db" />
		<cfargument name="ReadProperties" type="string" hint="Comma-separated list of properties to read" />
		<cfargument name="FilterProperties" type="string" hint="Comma-separated list of properties to filter by" />

		<cfset var currentProperty="" />
		<cfset var Query="" />

		<cfquery name="Query" Datasource="#getDatasource().DSN#" Username="#getDatasource().Username#" Password="#getDatasource().Password#">
		SELECT TOP 1
			[#arguments.SQLInput[ListFirst(arguments.ReadProperties)].DBName#]
			<cfif ListLen(ListRest(arguments.ReadProperties))>
				<cfloop list="#ListRest(arguments.ReadProperties)#" index="currentProperty">
					, [#arguments.SQLInput[currentProperty].DBName#]
				</cfloop>
			</cfif>

		FROM
			[#arguments.TableName#]

		WHERE
			[#arguments.SQLInput[ListFirst(arguments.FilterProperties)].DBName#]=<cfqueryparam value="#arguments.SQLInput[ListFirst(arguments.FilterProperties)].Value#" cfsqltype="#arguments.SQLInput[ListFirst(arguments.FilterProperties)].CFSQLType#" null="#arguments.SQLInput[ListFirst(arguments.FilterProperties)].IsNull#" />
			<cfif ListLen(ListRest(arguments.FilterProperties))>
				<cfloop list="#ListRest(arguments.FilterProperties)#" index="currentProperty">
					AND [#arguments.SQLInput[currentProperty].DBName#]=<cfqueryparam value="#arguments.SQLInput[currentProperty].Value#" cfsqltype="#arguments.SQLInput[currentProperty].CFSQLType#" null="#arguments.SQLInput[currentProperty].IsNull#" />
				</cfloop>
			</cfif>
		</cfquery>

		<cfreturn Query />
	</cffunction>

	<!--- update --->
	<cffunction name="update" access="public" output="false" returntype="boolean">
		<cfargument name="SQLInput" type="struct" hint="Struct of structs of some meta data and current values for easy data retrieval" />
		<cfargument name="TableName" hint="Name of table in string format." />
		<cfargument name="UpdateProperties" type="string" hint="Comma-separated list of properties to update" />
		<cfargument name="FilterProperties" type="string" hint="Comma-separated list of properties to filter by" />

		<cfset var currentProperty="" />
		<cfset var Query="" />

		<cfquery name="Query" Datasource="#getDatasource().DSN#" Username="#getDatasource().Username#" Password="#getDatasource().Password#">
		UPDATE [#arguments.TableName#]
		SET
			[#arguments.SQLInput[ListFirst(arguments.UpdateProperties)].DBName#]=<cfqueryparam value="#arguments.SQLInput[ListFirst(arguments.UpdateProperties)].Value#" cfsqltype="#arguments.SQLInput[ListFirst(arguments.UpdateProperties)].CFSQLType#" null="#arguments.SQLInput[ListFirst(arguments.UpdateProperties)].IsNull#" />
			<cfif ListLen(ListRest(arguments.UpdateProperties))>
				<cfloop list="#ListRest(arguments.UpdateProperties)#" index="currentProperty">
					, [#arguments.SQLInput[currentProperty].DBName#]=<cfqueryparam value="#arguments.SQLInput[currentProperty].Value#" cfsqltype="#arguments.SQLInput[currentProperty].CFSQLType#" null="#arguments.SQLInput[currentProperty].IsNull#" />
				</cfloop>
			</cfif>

		WHERE
			[#arguments.SQLInput[ListFirst(arguments.FilterProperties)].DBName#]=<cfqueryparam value="#arguments.SQLInput[ListFirst(arguments.FilterProperties)].Value#" cfsqltype="#arguments.SQLInput[ListFirst(arguments.FilterProperties)].CFSQLType#" null="#arguments.SQLInput[ListFirst(arguments.FilterProperties)].IsNull#" />
			<cfif ListLen(ListRest(arguments.FilterProperties))>
				<cfloop list="#ListRest(arguments.FilterProperties)#" index="currentProperty">
					AND [#arguments.SQLInput[currentProperty].DBName#]=<cfqueryparam value="#arguments.SQLInput[currentProperty].Value#" cfsqltype="#arguments.SQLInput[currentProperty].CFSQLType#" null="#arguments.SQLInput[currentProperty].IsNull#" />
				</cfloop>
			</cfif>
		</cfquery>

		<cfreturn True />
	</cffunction>

	<!--- delete --->
	<cffunction name="delete" access="public" output="false" returntype="boolean">
		<cfargument name="SQLInput" type="struct" hint="Struct of structs of some meta data and current values for easy data retrieval" />
		<cfargument name="TableName" hint="Name of table in string format." />
		<cfargument name="FilterProperties" type="string" hint="Comma-separated list of properties to filter by" />

		<cfset var currentProperty="" />
		<cfset var Query="" />

		<cfquery name="Query" Datasource="#getDatasource().DSN#" Username="#getDatasource().Username#" Password="#getDatasource().Password#">
		DELETE [#arguments.TableName#]
		WHERE
			[#arguments.SQLInput[ListFirst(arguments.FilterProperties)].DBName#]=<cfqueryparam value="#arguments.SQLInput[ListFirst(arguments.FilterProperties)].Value#" cfsqltype="#arguments.SQLInput[ListFirst(arguments.FilterProperties)].CFSQLType#" null="#arguments.SQLInput[ListFirst(arguments.FilterProperties)].IsNull#" />
			<cfif ListLen(ListRest(arguments.FilterProperties))>
				<cfloop list="#ListRest(arguments.FilterProperties)#" index="currentProperty">
					AND [#arguments.SQLInput[currentProperty].DBName#]=<cfqueryparam value="#arguments.SQLInput[currentProperty].Value#" cfsqltype="#arguments.SQLInput[currentProperty].CFSQLType#" null="#arguments.SQLInput[currentProperty].IsNull#" />
				</cfloop>
			</cfif>
		</cfquery>

		<cfreturn True />
	</cffunction>

	<!--- exists ---->
	<cffunction name="exists" access="public" output="false" returntype="boolean">
		<cfargument name="SQLInput" type="struct" hint="Struct of structs of some meta data and current values for easy data retrieval" />
		<cfargument name="TableName" hint="Name of table in string format." />
		<cfargument name="FilterProperties" type="string" hint="Comma-separated list of properties to filter by" />

		<cfset var currentProperty="" />
		<cfset var Query="" />

		<cfquery name="Query" Datasource="#getDatasource().DSN#" Username="#getDatasource().Username#" Password="#getDatasource().Password#">
		SELECT TOP 1 1
		FROM [#arguments.TableName#]
		WHERE
			[#arguments.SQLInput[ListFirst(arguments.FilterProperties)].DBName#]=<cfqueryparam value="#arguments.SQLInput[ListFirst(arguments.FilterProperties)].Value#" cfsqltype="#arguments.SQLInput[ListFirst(arguments.FilterProperties)].CFSQLType#" null="#arguments.SQLInput[ListFirst(arguments.FilterProperties)].IsNull#" />
			<cfif ListLen(ListRest(arguments.FilterProperties))>
				<cfloop list="#ListRest(arguments.FilterProperties)#" index="currentProperty">
					AND [#arguments.SQLInput[currentProperty].DBName#]=<cfqueryparam value="#arguments.SQLInput[currentProperty].Value#" cfsqltype="#arguments.SQLInput[currentProperty].CFSQLType#" null="#arguments.SQLInput[currentProperty].IsNull#" />
				</cfloop>
			</cfif>
		</cfquery>

		<cfif Query.Recordcount is 1>
			<cfreturn True />
		<cfelse>
			<cfreturn False />
		</cfif>
	</cffunction>

<!--- * * * * * * * * * * * * --->
<!--- * * * * PRIVATE * * * * --->
<!--- * * * * * * * * * * * * --->

	<!--- get Datasource --->
	<cffunction name="getDatasource" access="private" output="false" returntype="struct">
		<cfreturn variables.Datasource />
	</cffunction>
</cfcomponent>